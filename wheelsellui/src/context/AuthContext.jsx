// src/context/AuthContext.jsx
import React, { createContext, useContext, useState, useEffect } from 'react';
import apiClient from '../api/apiClient';

const AuthContext = createContext();

export const AuthProvider = ({ children }) => {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏—Ç —Ç–æ–∫–µ–Ω
    const [auth, setAuth] = useState({ 
        isAuthenticated: false, 
        user: null 
    });
    const [loading, setLoading] = useState(true);

    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    useEffect(() => {
        const storedToken = localStorage.getItem('authToken');
        if (storedToken) {
            // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—Å—Ç—å, —Å—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
            // –í –±–æ–µ–≤–æ–º –ø—Ä–æ–µ–∫—Ç–µ –Ω—É–∂–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JWT, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å email
            setAuth({ 
                isAuthenticated: true, 
                user: { email: 'authenticated user' } // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            });
        }
        setLoading(false);
    }, []);

    // 2. –§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞
    const login = async (email, password) => {
        try {
            // POST /api/auth/login –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç { Token: "..." }
            const response = await apiClient.post('/auth/login', { email, password });
            const token = response.data.token; // üõë –í–ê–ñ–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –æ—Ç–≤–µ—Ç–∞!
            
            if (token) {
                localStorage.setItem('authToken', token); // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
                setAuth({ 
                    isAuthenticated: true, 
                    user: { email } 
                });
                return true;
            }
        } catch (error) {
            console.error('Login failed:', error);
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ 401
            throw new Error('Invalid email or password.'); 
        }
        return false;
    };

    // 3. –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
    const logout = () => {
        localStorage.removeItem('authToken'); // üóëÔ∏è –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω
        setAuth({ isAuthenticated: false, user: null });
    };

    if (loading) {
        return <div>Loading...</div>; // –∏–ª–∏ MUI CircularProgress
    }

    return (
        <AuthContext.Provider value={{ ...auth, login, logout }}>
            {children}
        </AuthContext.Provider>
    );
};

export const useAuth = () => useContext(AuthContext);